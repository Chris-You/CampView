@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "_LayoutCharger";
}

@section Scripts
{
<script src="https://cdn.jsdelivr.net/npm/clipboard@2.0.10/dist/clipboard.min.js"></script>
<script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=ak5szsi1xk&callback=mapSet&submodules=geocoder"></script>
}


<style type="text/css">

	.gridcontainer {
		display: grid;
		grid-template-columns: 130px 320px;
		grid-template-rows: 60px 30px 30px 30px 30px 30px;
	}

	.gridtitle {
        font-weight:bold;
        text-align:left;
        margin:0 10px 0 15px;
	}

</style>

<script type="text/javascript">


    var map;
    var geocoder;
    var markers=[];
    var infoWindows = [];
    var dataList = [];
    

    var center = {
        x: 0,
        y: 0
    };

    $(document).ready(function () {
        mapSet();

    });

    function mapSet() {

        if(!navigator.geolocation) {
            alert('Geolocation is not supported by your browser');
        }
        else
        {
            mapInit();
        }
    }

    function resetMap() {
        
        markers=[];
        infoWindows = [];
        dataList = [];
        //console.log("mapInit");
	}

   
    function mapInit() {

        map = null;
        markers=[];
        infoWindows = [];
        dataList = [];
        //console.log("mapInit");

        navigator.geolocation.getCurrentPosition(function (position) {
            setMap(position.coords.latitude, position.coords.longitude);

            center.x = position.coords.longitude;
            center.y = position.coords.latitude;
            console.log("init");
            //console.log(position);

            
            var latlng = map.getCenter(); 
            console.log(center);
            console.log(latlng);
            search(latlng);

            }
            , function (error) {
                console.log(error);
            });
	}
    

    function setMap(lat, lng) {

        var mapOptions = {
            center: new naver.maps.LatLng(lat, lng),
            zoom: 14,
            //scaleControl: false,
            logoControl: false,
            //mapDataControl: false,
            //zoomControl: false,
        };

        //console.log(mapOptions);

        map = new naver.maps.Map('divMap', mapOptions);
        // 주소-좌표 변환 객체를 생성합니다
        //geocoder = new naver.maps.services.Geocoder();

        // 마우스 드래그로 지도 이동이 완료되었을 때 마지막 파라미터로 넘어온 함수를 호출하도록 이벤트를 등록합니다
        naver.maps.Event.addListener(map, 'dragend', function(event) {        
    
            // 지도 중심좌표를 얻어옵니다 
            var latlng = map.getCenter(); 
    
            //var message = '중심좌표 : ' + latlng.getLat() + ', '+ latlng.getLng();
            
            console.log("mouseEvent dragend");
            console.log(event);

            //var resultDiv = document.getElementById('result');  
            //resultDiv.innerHTML = message;

             //searchCoordinateToAddress(event.coord);


            search(latlng);
    
        });


        naver.maps.Event.addListener(map, 'click', function (event) {
            // 클릭한 위도, 경도 정보를 가져옵니다 
            console.log("mouse click");
            console.log(event);

            search(event.coord);

        });


    }


    function searchCoordinateToAddress(latlng) {

        naver.maps.Service.reverseGeocode({
            coords: latlng,
            orders: [
                naver.maps.Service.OrderType.ADDR,
                naver.maps.Service.OrderType.ROAD_ADDR
            ].join(',')
            }, function (status, response)
            {
                if (status === naver.maps.Service.Status.ERROR)
                {
                    if (!latlng) {
                        return alert('ReverseGeocode Error, Please check latlng');
                    }
                    if (latlng.toString) {
                        return alert('ReverseGeocode Error, latlng:' + latlng.toString());
                    }
                    if (latlng.x && latlng.y) {
                        return alert('ReverseGeocode Error, x:' + latlng.x + ', y:' + latlng.y);
                    }

                    return alert('ReverseGeocode Error, Please check latlng');
                }

                console.log(response);

                var address = response.v2.address,
                    htmlAddresses = [];

                if (address.jibunAddress !== '') {
                    htmlAddresses.push('[지번 주소] ' + address.jibunAddress);
                }

                if (address.roadAddress !== '') {
                    htmlAddresses.push('[도로명 주소] ' + address.roadAddress);
                }
                /*
            infoWindow.setContent([
                '<div style="padding:10px;min-width:200px;line-height:150%;">',
                '<h4 style="margin-top:5px;">검색 좌표</h4><br />',
                htmlAddresses.join('<br />'),
                '</div>'
            ].join('\n'));

            */

            //infoWindow.open(map, latlng);
        });
    }




    function hideMarker() {

        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
            infoWindows[i].close();
        }

        markers = [];
        infoWindows = [];
	}

    function search(latlng) {

        hideMarker();

        //console.log("search");
        //console.log(latlng);



        naver.maps.Service.reverseGeocode({
            coords: latlng,
            orders: [
                naver.maps.Service.OrderType.ADDR,
                naver.maps.Service.OrderType.ROAD_ADDR
            ].join(',')
            }, function (status, response)
            {
                if (status === naver.maps.Service.Status.ERROR)
                {
                    if (!latlng) {
                        return alert('ReverseGeocode Error, Please check latlng');
                    }
                    if (latlng.toString) {
                        return alert('ReverseGeocode Error, latlng:' + latlng.toString());
                    }
                    if (latlng.x && latlng.y) {
                        return alert('ReverseGeocode Error, x:' + latlng.x + ', y:' + latlng.y);
                    }

                    return alert('ReverseGeocode Error, Please check latlng');
                }

                
                var result = response.v2.results;
                var address = response.v2.address;
                var htmlAddresses = [];

                if (address.jibunAddress !== '') {
                    htmlAddresses.push('[지번 주소] ' + address.jibunAddress);
                }

                if (address.roadAddress !== '') {
                    htmlAddresses.push('[도로명 주소] ' + address.roadAddress);
                }

                //console.log(response.v2.results);
                //console.log(htmlAddresses[0]);


                $("#depth1").val(result[0].region.area1.name);
                if (result[0].region.area2.name == '') {
                    $("#depth2").val(result[0].region.area3.name);
                    $("#depth3").val("");
                }
                else {
                    $("#depth2").val(result[0].region.area2.name);
                    $("#depth3").val(result[0].region.area3.name);
				}
                

                ajax(latlng);

        });

        

    }


    function worker(urls) {
        
        var worker = new Worker('/script/worker_charger.js');
        
        worker.postMessage(urls);  // 워커에 메시지를 보낸다.



        worker.onmessage = function (e) {
            console.log(e.data);
		}

	}


    function ajax(latlng) {

        var req = {
            "depth1": $("#depth1").val(),
            "depth2": $("#depth2").val(),
            "depth3": $("#depth3").val(),
            "lat": latlng.y,
            "lng": latlng.x,
        };

        //$("#divCampList").empty();
        
        console.log("azax... request")
        showDiv();

        $.ajax({
            type: "post",
            url: "/charger/search",
            data: req,
            async:false,
            success: function (data) {
                //script = data.replace(/<script>(.*)<\/script>/, "$1"); // Remove tags
                //eval(script); // Execute javascript
                //console.log(data);

                if (data.length > 0) {

                    dataList = data;

                    for (var i = 0; i < data.length; i++) {

                        var lng = data[i].lng;
                        var lat = data[i].lat;

                        setMarker(lat, lng, data[i].statNm, i, data[i].avail);
                    }
                }


                //ajaxStatus(req);


            },
            error: function (data) {
                //alert("error: " + data.responseText);
                closeDiv("light");
            },
            complete: function () {
                closeDiv("light");
			}
        });

        var data = {
            "url": "/charger/Status",
            "req" : req
        };


        //worker(data);

    }

    


    function closeInfo(seq) {
        infoWindows[seq].close();
	}

    function setMarker(lat, lng, facltNm, seq, avail) {

        var iconUrl = "";
        if (avail =="Y") {
            //iconUrl += '<span class="glyphicon glyphicon-map-marker" aria-hidden="true" style="color:#31b0d5;"></span>';
            iconUrl = '/img/icon/icons8-charger_avail.png';
        } 
        else if (avail =="X"){
            //iconUrl += '<span class="glyphicon glyphicon-map-marker" aria-hidden="true" style="color:#c9302c;"></span>';
            iconUrl = '/img/icon/icons8-charger_not.png';
        }
        else{
            //iconUrl += '<span class="glyphicon glyphicon-map-marker" aria-hidden="true" style="color:#777;"></span>';
            iconUrl = '/img/icon/icons8-charger_not.png';
        }

        var marker = new naver.maps.Marker({
            position: new naver.maps.LatLng(lat, lng),
            map: map,

            icon: {
                url: iconUrl,
                size: new naver.maps.Size(28, 32),
                //content: iconUrl,
                //anchor: new naver.maps.Point(19, 58),
            }
        });

        markers.push(marker);
        
        var infoWindow = new naver.maps.InfoWindow({
            content: '<div style="width:250px;text-align:center;padding:10px;" onclick="closeInfo('+ seq +')"> <b>'+ facltNm +'</b></div>'
        });

        infoWindows.push(infoWindow);

        markers[seq].setMap(map);
        naver.maps.Event.addListener(markers[seq], 'mouseover', getClickHandler(seq, false));
        naver.maps.Event.addListener(markers[seq], 'mouseout', getClickHandler(seq, false));

        naver.maps.Event.addListener(markers[seq], 'click', getClickHandler(seq, true));

    }

    function getClickHandler(seq, isClick) {

        return function (e) {

            getClickListItem(seq, isClick);
            
        }
    }


    function getClickListItem(seq, isClick) {

        var marker = markers[seq],
        infoWindow = infoWindows[seq];

        if (isClick) {
            showDetail(seq);
        }
        else {
            
        }

        if (infoWindow.getMap()) {
            infoWindow.close();
        } else {
            infoWindow.open(map, marker);
        }
    }


    
    function showDetail(seq) {
        
        //map.setCenter(new naver.maps.LatLng(dataList[seq].lat, dataList[seq].lng));
        var html = "";
        $("#divChargeDtl").empty();
        

        var title = "<p>■ <b>"+ dataList[seq].statNm + "</b><p>"
        title += "<div class='gridcontainer'>";

        title += "<div class='gridtitle' >- 주소</div><div><span id='address'  data-clipboard-text=\"" + dataList[seq].addr + "\" > " + dataList[seq].addr + "</span>";
        //title += " <button type='button' class='btn btn-default btn-xs' onclick='clipboard(\"address\");'>복사</button>"

        if (dataList[seq].location != "" && dataList[seq].location != "null" ) {
            title += "<br /> (" + dataList[seq].location + ")"
        }
        title += "</div>"
        title += "<div class='gridtitle' >- 충전소 구분</div><div> " + dataList[seq].kindNm + " " + dataList[seq].kindDetailNm + "</div>";
        
        if (dataList[seq].chgr.length > 0) {

            title += "<div class='gridtitle' >- 운영기관</div><div> " + dataList[seq].chgr[0].busiNm + "&nbsp;&nbsp; ☎ <a href='tel:" + dataList[seq].chgr[0].busiCall + "'>" + dataList[seq].chgr[0].busiCall + "</a></div>";

            title += "<div class='gridtitle' >- 이용가능시간</div><div>" + dataList[seq].chgr[0].useTime + "</div>";

            var parking = "<span style='color:red;'>있음</span>";
            if (dataList[seq].chgr[0].parkingFree == "Y") {
                parking = "없음";
            }
            title += "<div class='gridtitle' >- 주차료</div><div>" + parking + "</div>";

            if (dataList[seq].chgr[0].limitYn == "Y") {

                var limit = "제한";
                if (dataList[seq].chgr[0].limitDetail != "") limit = dataList[seq].chgr[0].limitDetail;

                title += "<div class='gridtitle' >- 이용자 제한</div><div><span style='color:red;'>" + limit + "</span></div>";
            }

            if (dataList[seq].chgr[0].note != "") {
                title += "<div class='gridtitle' >- 충전소 안내</div><div>" + dataList[seq].chgr[0].note + "</div>";
            }
        }

        title += "</div>"
        title += "<hr style='height:5px;'/>";



        // 충전기 정보
        var list = "<p>■ <b>충전기 정보</b><p>";
        list += '<table class="table table-condensed table-hover table-striped">';
        list += '<tr>';
        list += '<td><b>번호</b><td>';
        list += '<td><b>충전용량</b><td>';
        list += '<td><b>상태</b><td>';
        list += '<td><b>충전기 타입</b><td>';
        list += '<td><b>충전중 시작시간</b><td>';
        list += '</tr>';

        if (dataList[seq].chgr.length > 0) {
            for (var i = 0; i < dataList[seq].chgr.length; i++) {
                var stat = '';
                if (dataList[seq].chgr[i].stat == "2")  stat = '<span class="label label-primary">충전대기</span>';
                else if (dataList[seq].chgr[i].stat == "3") stat = '<span class="label label-success">충전중</span>';
                else if (dataList[seq].chgr[i].stat == "4") stat = '<span class="label label-warning">운영중지</span>';
                else if (dataList[seq].chgr[i].stat == "5") stat = '<span class="label label-danger">점검중</span>';
                else if (dataList[seq].chgr[i].stat == "9") stat = '<span class="label label-default">상태미확인</span>';
                else if (dataList[seq].chgr[i].stat == "1") stat = '<span class="label label-default">통신이상</span>';


                var type = '';
                if (dataList[seq].chgr[i].chgerType == "01") type = 'DC차데모';
                else if (dataList[seq].chgr[i].chgerType == "02") type = 'AC완속';
                else if (dataList[seq].chgr[i].chgerType == "03") type = 'DC차데모, AC3상';
                else if (dataList[seq].chgr[i].chgerType == "04") type = 'DC콤보';
                else if (dataList[seq].chgr[i].chgerType == "05") type = 'DC차데모,DC콤보';
                else if (dataList[seq].chgr[i].chgerType == "06") type = 'DC차데모,AC3상,DC콤보';
                else if (dataList[seq].chgr[i].chgerType == "07") type = 'AC3상';


                list += '<tr>';
                list += '  <td>'+ dataList[seq].chgr[i].chgerId +'<td>';
                list += '  <td>'+ (dataList[seq].chgr[i].output == "" ? "-" : dataList[seq].chgr[i].output + 'Kw' ) +'<td>';
                list += '  <td>'+ stat + '<td>';
                list += '  <td>'+ type +'<td>';
                list += '  <td>'+ (dataList[seq].chgr[i].stat=="3" ? dtYmd(dataList[seq].chgr[i].nowTsdt) : '-') +'<td>';
                list += '</tr>';
            }
        }
        
        list += '</table>';

        html = title + list;

        $("#divChargeDtl").html(html);

    }


    function dtYmd(dt) {

        return dt.substr(0, 4) + "-" + dt.substr(4, 2) + "-" + dt.substr(6, 2) +" " +  dt.substr(8, 2) + ":" +  dt.substr(10, 2);

    }


    function clipboard(objId) {

        var clipboard = new ClipboardJS('#' + objId);
        console.log(clipboard);


        clipboard.on('success', function(e) {
            console.info('Action:', e.action);
            console.info('Text:', e.text);
            console.info('Trigger:', e.trigger);

            e.clearSelection();
        });

        clipboard.on('error', function(e) {
            console.error('Action:', e.action);
            console.error('Trigger:', e.trigger);
        });

	}



</script>

<input type="hidden" name="depth1" id="depth1" value=""/>
<input type="hidden" name="depth2" id="depth2" value=""/>
<input type="hidden" name="depth3" id="depth3" value=""/>

<div id="divMap" style="width:100%;height:250px;"></div>
<div style="text-align:right;"><a target="_blank" href="https://icons8.com/icon/39110/tesla-supercharger-pin"> icon</a> by <a target="_blank" href="https://icons8.com">Icons8</a></div>

 <div id="fade" class="black_overlay" style="display:none;z-index:1000;height:417px;"></div>



<div id="divChargeDtl" style="margin-top: 25px;"></div>


<div id="divComment" style="margin-top:25px;width:100%;"></div>


<div id="divBottom" style="width:100%;height:100px;"></div>


    <script type="text/javascript">

	    /// 화면의 중앙에 레이어띄움
        function showDiv() {

            var maskHeight = $(document).height();
		    var maskWidth = $(window).width();

		    
            $('#fade').show();
            console.log("show~~");
	    }

	    function closeDiv(objId) {
		    $('#fade').hide();
		    console.log("hide~~");
	    }


    </script>